# RPA(Robotic Process Automation) Program For MHE QD Team.
#
# Generated by SH Lim & HC Lee @ MHE
#
# Copyright Limited <seonghyu.lim@mandohella.com>
#                   <hclee@mandohella.com>
# Generated @ 2021.Jan.15th ~ 

from contextlib import nullcontext
import sys
from tkinter.constants import HIDDEN
import warnings

from numpy.lib.function_base import select
from numpy.lib.histograms import histogram
warnings.simplefilter("ignore", UserWarning)
sys.coinit_flags = 2
import glob
import os
import cv2
import pandas as pd
import datetime
import pytesseract
import re, atexit
import openpyxl

from datetime import datetime ##@@ datetime.datetime (import) to attach date on filename
from pdf2image import convert_from_path
from os.path import isfile, join
from os.path import *
from os import listdir
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QCoreApplication, QLine, Qt
from PyQt5.QtGui import *
from pptx import Presentation
from pptx.util import Inches
from openpyxl import load_workbook
from openpyxl import Workbook
from PIL import Image 
from pywinauto.application import Application
import time
import win32gui
import win32com
from pynput import mouse
import qd_event
import ctypes

##@@ Libraries for Email & Web ####

import requests
from bs4 import BeautifulSoup
from selenium import webdriver

########################################

# 입/출력 문서 관리 폴더를 정의합니다.
# 계속 바꾸다 보니 뭐가 이름일아 잘 안 맞아요. 
drawing_path = r'D:/qd_rpa/drawing/'                    # 도면이 들어있는 폴더 
drawing_img_path = r'D:/qd_rpa/drawing_img/'           # 도면이 변환된 그림파일이 들어있는 폴더
find_obj_path = r'D:/qd_rpa/find_obj/'                  # 찾고자 하는 그림파일이 들어있는 폴더
find_result_path = r'D:/qd_rpa/find_result/'            # 찾은 그림 파일이 들어있는 폴더
find_result_man_path = r'C:/test/'    ##@@ 찾고자 하는 '직접 캡쳐한' 그림파일이 들어있는 폴더

# OpenCV로 기능에서 이미지 (매칭)검색할 때 찾는 방법을 정의.
# TM_CCOEFF_NORMED - 정규화된 상관계수 방법 (요것 만 활성화, 딴 건 잘 못찾아서...)
# TM_CCORR_NORMED - 정규화된 상관관계 방법
# TM_SQDIFF_NORMED - 정규화된 제곱차 매칭 방법
methods = ['cv2.TM_CCOEFF_NORMED']#, 'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF_NORMED']

# DPI를 콤보박스에서 고를 수 있게 리스트에 담아봤어요.
dpi_list = ['100','200','300','400','800','1600']

# Tesseract 이미지 to 문자 변환 Option 입니다. (영어 + 한글) 
custom_config = r'-l eng+kor'

class MyWindow(QWidget):  
    def __init__(self):
        super().__init__()
        self.setupUI()

    def setupUI(self):
        # 전체 Layout은 Grid 형태 입니다.
        layout = QGridLayout()
        self.myMenuBar = QMenuBar(self)
        self.myMenuBar.setFixedHeight(25)
        self.myMenuBar.setNativeMenuBar(False)
        self.myMenuBar.palette().setColor(self.myMenuBar.foregroundRole(), Qt.gray)
        file_menubar = self.myMenuBar.addMenu("&File")
        edit_menubar = self.myMenuBar.addMenu("Edit")
        view_menubar = self.myMenuBar.addMenu("view")
        help_menubar = self.myMenuBar.addMenu("Help")
        file_menubar.addAction("New")
        file_menubar.addAction("Open")
        file_menubar.addAction("Close")
        file_menubar.addAction("Exit")
        layout.addWidget(self.myMenuBar,0,0,1,5)
        
        # Drawing group
        # 도면을 처리하는 그룹입니다.
        self.drawing_group = QGroupBox('drawing')
        self.drawing_layout = QGridLayout()
        self.drawing_loc_le = QLineEdit()
        self.drawing_loc_le.setPlaceholderText(drawing_path)
        self.drawing_combo = QComboBox(self)
        self.drawing_combo.addItems(dpi_list)
        self.drawing_combo.setCurrentIndex(1)
        self.drawing_button_select = QPushButton("도면선택 and 이미지변환")
        self.drawing_button_select.clicked.connect(self.selectButtonClicked)
        self.drawing_tabs = QTabWidget()
        self.drawing_label = [QLabel('PDF-image',self) for i in range(10)]
        for idx, label in enumerate(self.drawing_label):
            label.setFixedSize(600,400)
            label.setAlignment(Qt.AlignCenter)
            font = label.font()
            font.setPointSize(40)
            label.setFont(font)
            self.drawing_tabs.addTab(label, str(idx+1) + ' ')
        self.drawing_layout.addWidget(self.drawing_loc_le,0,0,1,4)
        self.drawing_layout.addWidget(self.drawing_combo,0,4,1,1)
        self.drawing_layout.addWidget(self.drawing_button_select,0,5,1,2)
        self.drawing_layout.addWidget(self.drawing_tabs,1,0,7,7)
        self.drawing_group.setLayout(self.drawing_layout)
        layout.addWidget(self.drawing_group,1,0,5,1)
        
        # finding & ocr
        # 원하는 그림을 찾고 OCR을 진행하기 위한 그룹입니다.
        self.finding_group = QGroupBox('find & OCR')
        self.finding_layout = QGridLayout()
        self.finding_le_1 = QLineEdit()
        self.finding_le_1.setPlaceholderText(find_obj_path)
        self.finding_obj_btn_1 = QPushButton("파일 선택-1")
        self.finding_obj_btn_1.clicked.connect(self.selectFindObjButtonClicked_1)
        self.finding_le_2 = QLineEdit()
        self.finding_le_2.setPlaceholderText(find_obj_path)
        self.finding_obj_btn_2 = QPushButton("파일 선택-2")
        self.finding_obj_btn_2.clicked.connect(self.selectFindObjButtonClicked_2)
        self.finding_anal_btn = QPushButton("찾아내기")
        self.finding_anal_btn.clicked.connect(self.findAnalyzeButtonClicked)
        self.finding_ocr_btn = QPushButton("OCR")
        self.finding_ocr_btn.clicked.connect(self.OcrButtonClicked)
        self.finding_obj_label_1 = QLabel('object-image',self)
        self.finding_obj_label_1.setFixedSize(600,300)
        self.finding_obj_label_1.setAlignment(Qt.AlignCenter)
        font = self.finding_obj_label_1.font()
        font.setPointSize(40)
        self.finding_obj_label_1.setFont(font)
        self.finding_obj_label_2 = QLabel('object-image',self)
        self.finding_obj_label_2.setFixedSize(600,300)
        self.finding_obj_label_2.setAlignment(Qt.AlignCenter)
        self.finding_obj_label_2.setFont(font)        
        self.finding_match_label_1 = QLabel('match-image',self)
        self.finding_match_label_1.setFixedSize(600,300)
        self.finding_match_label_1.setAlignment(Qt.AlignCenter)
        self.finding_match_label_1.setFont(font)        
        self.finding_match_label_2 = QLabel('match-image',self)
        self.finding_match_label_2.setFixedSize(600,300)
        self.finding_match_label_2.setAlignment(Qt.AlignCenter)
        self.finding_match_label_2.setFont(font)

        self.finding_tabs = QTabWidget()
        self.finding_tabs.addTab(self.finding_obj_label_1, 'finding_obj_1')
        self.finding_tabs.addTab(self.finding_match_label_1, 'found_match_1')
        self.finding_tabs.addTab(self.finding_obj_label_2, 'finding_obj_2')
        self.finding_tabs.addTab(self.finding_match_label_2, 'found_match_2')
        self.finding_layout.addWidget(self.finding_le_1,0,0,1,4)
        self.finding_layout.addWidget(self.finding_obj_btn_1,0,4,1,1)
        self.finding_layout.addWidget(self.finding_le_2,1,0,1,4)
        self.finding_layout.addWidget(self.finding_obj_btn_2,1,4,1,1)
        self.finding_layout.addWidget(self.finding_anal_btn,0,5,1,1)
        self.finding_layout.addWidget(self.finding_ocr_btn,1,5,1,1)
        self.finding_layout.addWidget(self.finding_tabs,2,0,5,6)
        self.finding_group.setLayout(self.finding_layout)
        layout.addWidget(self.finding_group,6,0,7,1)

        # 중간과정 문자표시 테이블
        # 디버깅 또는 중간과정을 사용자에게 전달하기 위해 만든 Text 창 그룹 입니다.
        self.terminal_group = QGroupBox('terminal')
        self.terminal_layout = QVBoxLayout()
        self.terminal_browser = QTextBrowser()
        self.terminal_browser.setAcceptRichText(True)
        self.terminal_browser.setOpenExternalLinks(True)
        self.terminal_browser.setFixedWidth(500)
        self.terminal_layout.addWidget(self.terminal_browser)
        self.terminal_group.setLayout(self.terminal_layout)
        layout.addWidget(self.terminal_group, 5,1,7,1)

        # function button
        # 각종 기능 버튼이 있는 그룹입니다. (Clear/Quit/Add row/Delete Row/Update Row 등등...)
        # 또 뭔가 기능을 넣을 때는 해당 그룹을 손되시면 됩니다. 크기도 좀 키워야 하는데...
        self.func_button_group = QGroupBox('function button')
        self.func_button_layout = QGridLayout()
        self.func_button_clear = QPushButton("Clear")
        self.func_button_clear.clicked.connect(self.clear_text)
        self.func_button_quit = QPushButton("Quit")
        self.func_button_quit.clicked.connect(self.exit_app)
        self.func_button_ppt = QPushButton("PPT")
        self.func_button_ppt.clicked.connect(self.ppt_add_picture)
        self.func_button_add_row = QPushButton("add row")
        self.func_button_add_row.clicked.connect(self.add_row)
        self.func_button_delete_row = QPushButton("delete row")
        self.func_button_delete_row.clicked.connect(self.delete_row)
        self.func_button_update_row = QPushButton("update row")
        self.func_button_update_row.clicked.connect(self.update_row)
        self.func_button_layout.addWidget(self.func_button_clear,0,0,1,1)
        self.func_button_layout.addWidget(self.func_button_ppt,0,1,1,1)
        self.func_button_layout.addWidget(self.func_button_add_row,0,2,1,1)
        self.func_button_layout.addWidget(self.func_button_delete_row,0,3,1,1)
        self.func_button_layout.addWidget(self.func_button_update_row,1,0,1,1)
        self.func_button_layout.addWidget(self.func_button_quit,1,3,1,1)
        self.func_button_group.setLayout(self.func_button_layout)
        layout.addWidget(self.func_button_group,12,1,1,1)

        # infomation
        # Line Editor 등이 있는 그룹니다.
        # 요기서 내용을 업데이트해서 Table (DB) 에 업데이트 하고 가져오고 합니다.
        # 문서를 출력할 때도 여기의 Text를 기준으로 문서를 생성합니다.
        self.info_group = QGroupBox('information')
        self.info_group.setFixedWidth(400)
        self.info_layout = QGridLayout()
        self.info_le = []   # Line Editor를 많아서 List로 관리합니다. (현재 총 13개)
        self.info_label = ['project name','Phase','[Doc] Rev.','[Doc] Rev. Date','[Doc] Rev. EO','[Doc] Rev. name',
                        'HW&SW Ver.','OEM P/No','Mando P/No','MHE P/No','NSR No','GP 스티커','working Date']
        for idx, self.lbs in enumerate(self.info_label):
            self.info_layout.addWidget(QLabel(self.info_label[idx],self),(idx),0,1,1)
            self.info_le.append(QLineEdit())
            self.info_le[idx].setFixedHeight(20)
            self.info_layout.addWidget(self.info_le[idx],(idx),1,1,2)
        self.info_group.setLayout(self.info_layout)
        layout.addWidget(self.info_group,5,2,7,1)

        # documentation button
        # 문서를 출력하기 위한 버튼 모음 입니다.
        self.doc_button_group = QGroupBox('documentaion button')
        self.doc_button_group.setFixedWidth(250)
        self.doc_button_layout = QVBoxLayout()
        self.doc_button = []    # Documentation 을 위한 버튼을 List로 관리합니다. 앞으로 많아질 것같아서... (현재 총 11개)
        self.doc_button_name = ['Inspection\nAgreement','Inspection\nReport','Sample\nNotice','PSW','Report',
                                'Report','Report','Report','Report','Report','Report']
        
        for idx, self.doc_button_name in enumerate(self.doc_button_name):
            self.doc_button.append(QPushButton(self.doc_button_name))
            self.doc_button[idx].setFixedHeight(32)
            self.doc_button_layout.addWidget(self.doc_button[idx])

        self.doc_button[0].clicked.connect(self.doc_agreement_build)
        self.doc_button[1].clicked.connect(self.doc_report_build)
        self.doc_button[2].clicked.connect(self.doc_sample_notice_build)
        self.doc_button[3].clicked.connect(self.doc_PWS_build)
        self.doc_button_group.setLayout(self.doc_button_layout)
        layout.addWidget(self.doc_button_group,5,3,7,1)

        # selenium용 (mail, web-access) 버튼 모음 입니다.
        self.selenium_button_group = QGroupBox('Selenium Buttons')
        self.selenium_button_layout = QGridLayout()
        self.selenium_button_mail = QPushButton("Mail")
        self.selenium_button_mail.setFixedWidth(150)
        self.selenium_button_mail.clicked.connect(self.mail_document)
        self.selenium_button_layout.addWidget(self.selenium_button_mail,0,0,1,1)
        self.selenium_button_group.setLayout(self.selenium_button_layout)
        layout.addWidget(self.selenium_button_group,12,2,1,3)

        # data table
        # Data들을 관리하기 위한 테이블 입니다. (DB 관리용)
        # 여기 Table이 Pandas와 연동이 되어 있습니다.
        self.data_table_group = QGroupBox('data table')
        self.data_table_layout = QVBoxLayout()
        self.data_table_pjt = QTableWidget(self)
        self.data_table_pjt.itemClicked.connect(self.item_clicked)
        self.data_table_pjt.itemActivated.connect(self.item_clicked)
        self.data_table_pjt.itemSelectionChanged.connect(self.item_clicked)
        self.data_table_layout.addWidget(self.data_table_pjt)
        self.data_table_group.setLayout(self.data_table_layout)
        layout.addWidget(self.data_table_group,1,1,4,4)
        
        # CSV 파일을 불러와서 Panda Dataframe에 넣어 줍니다. 넣고 Unnamed 인덱스 한줄 삭제...
        self.df = pd.read_csv('test.csv',encoding='utf-8')
        self.df = self.df.drop("Unnamed: 0",1)
        
        # table의 Row, Column, Header Label을 셋업 해줍니다.
        self.data_table_pjt.setRowCount(len(self.df.index))
        self.data_table_pjt.setColumnCount(len(self.df.columns))
        self.data_table_pjt.setHorizontalHeaderLabels(self.df.columns)
        
        for i in range(len(self.df.index)):
            for j in range(len(self.df.columns)):
                self.data_table_pjt.setItem(i, j, QTableWidgetItem(str(self.df.iloc[i, j])))

        self.statusbar = QStatusBar(self)
        self.statusbar.showMessage('Ready')
        self.statusbar.setFixedHeight(20)
        layout.addWidget(self.statusbar,14,0,1,1)

        # GUI 
        # 세팅을 끝내고 뿌려줍니다...
        self.setGeometry(30, 50, 800, 800)
        self.setWindowTitle("Drawing Analyzer")
        self.setLayout(layout)
        self.show() 

    # 도면(pdf) 파일을 찾아서 이미지(png) 파일로 변경합니다. 
    def selectButtonClicked(self):
        self.dwg_filename = QFileDialog.getOpenFileName(self, 'Open file', drawing_path)
        if not self.dwg_filename[0]:
            QMessageBox.about(self, "Warning", "Drawing 파일을 선택되지 않았습니다.")
            return
        
        self.drawing_loc_le.setText(self.dwg_filename[0])
        self.terminal_browser.append(self.dwg_filename[0])
    
        try:
            pages = convert_from_path(self.dwg_filename[0], dpi=int(self.drawing_combo.currentText()))    
        except:
            print("Unexpected error:", sys.exc_info()[0])
            reply = QMessageBox.question(self, "Warning", "PDF 파일이 DRM에 걸려 있습니다. 직접 선택 영역을 직접 선택하시겠습니까?",
                                QMessageBox.Yes | QMessageBox.No, QMessageBox.No)

            self.drawing_label[0].setText('DRM')
            self.finding_obj_label_1.setText('DRM')
            self.finding_obj_label_2.setText('DRM')

            if reply == QMessageBox.Yes:
                self.adobe_reader = Application(backend="uia").start(cmd_line = 'C:\Program Files (x86)\Adobe\Reader 11.0\Reader\AcroRd32.exe'+ ' ' + self.dwg_filename[0])
                self.adobe_reader.connect(path='C:\Program Files (x86)\Adobe\Reader 11.0\Reader\AcroRd32.exe')
                time.sleep(0.1)
                self.adobe_reader_window_name = os.path.basename(self.dwg_filename[0]) + " - Adobe Reader"
                self.adobe_reader_window_id = win32gui.FindWindow(None, self.adobe_reader_window_name)
                self.terminal_browser.append(os.path.basename(self.dwg_filename[0]) + " - Adobe Reader" + " opened with PID: " + str(self.adobe_reader_window_id))
                self.terminal_browser.append(os.path.basename("opened with PID: " + str(self.adobe_reader_window_id) + "name" + self.adobe_reader_window_name))
                self.shell = win32com.client.Dispatch("WScript.Shell")

                self.findAndCaptureDrmDrawing(page_no=1)
                self.findAndCaptureDrmDrawing(page_no=2)

                self.adobe_reader.kill()

                return
            else:
                return

        png_files = glob.glob('result/*.png')

        for png_file in png_files:
            try:
                os.remove(png_file)
            except OSError as e:
                print(f"Error:{e.strerror}")
        
        for i, page in enumerate(pages):
            dwg_img_filename = drawing_img_path+os.path.basename(self.dwg_filename[0])[:-4]
            page.save(f'{dwg_img_filename}_page{i+1:0>2d}.png','PNG')
            self.terminal_browser.append(f'{dwg_img_filename}_page{i+1:0>2d}.png saved...')
        self.terminal_browser.append('Done !')

        self.dwg_img_files = [ f for f in listdir(drawing_img_path) if isfile(join(drawing_img_path,f)) ]
        self.images = [cv2.imread(file) for file in glob.glob(drawing_img_path + "/*.png")]

        temp_filename = "{}.png".format(os.getpid())

        for i in range(0,len(self.dwg_img_files)):
            cv2.imwrite(temp_filename, self.images[i])
            pic = QPixmap(temp_filename)
            pic = pic.scaledToWidth(600)
            self.drawing_label[i].setPixmap(QPixmap(pic))
            os.remove(temp_filename)

    # 도면에 DRM이 걸려 있을 경우...
    def findAndCaptureDrmDrawing(self,page_no = 1): 
        win32gui.SetForegroundWindow(self.adobe_reader_window_id)
        time.sleep(0.1)
        self.shell.SendKeys('^0',0)
        msg = ctypes.windll.user32.MessageBoxW(None, "도면에서 확대하고자하는 영역을 선택하세요.", "확대", 0x00040000)
        self.shell.SendKeys('{F10}')
        self.shell.SendKeys('V')
        self.shell.SendKeys('Z')
        self.shell.SendKeys('M')

        # Collect mouse events until released
        qd_event.mouse_listener()
        msg = ctypes.windll.user32.MessageBoxW(None, "도면에서 캡쳐하고자하는 영역을 선택하세요.", "캡쳐", 0x00040000)
        win32gui.SetForegroundWindow(self.adobe_reader_window_id)
        self.shell.SendKeys('{F10}')
        self.shell.SendKeys('E')
        self.shell.SendKeys('A')

        # Collect mouse events until released
        qd_event.mouse_listener()
        mspaint = Application(backend="uia").start(cmd_line = 'C:\Windows\system32\mspaint.exe', work_dir=find_result_path)
        mspaint.connect(path = 'C:\Windows\system32\mspaint.exe')
        mspaint_window_id = win32gui.GetForegroundWindow()
        print(mspaint_window_id)
        win32gui.SetForegroundWindow(mspaint_window_id)
        time.sleep(0.1)
        self.shell.SendKeys("^v",0)
        time.sleep(0.1)
        #self.shell.SendKeys("^s",0)
        self.shell.SendKeys("{F12}",0)
        time.sleep(0.1)
        if page_no == 1: 
            self.pic_name_find1 = os.path.abspath(find_result_man_path) + '\\'
            self.pic_name_find1 += os.path.splitext(os.path.basename(self.dwg_filename[0]))[0]
            self.pic_name_find1 += datetime.today().strftime('%Y%m%d_%H%M%S_') + str(page_no) + ".png"
            
            self.shell.SendKeys(self.pic_name_find1)

        elif page_no == 2: 
            self.pic_name_find2 = os.path.abspath(find_result_man_path) + '\\'
            self.pic_name_find2 += os.path.splitext(os.path.basename(self.dwg_filename[0]))[0]
            self.pic_name_find2 += datetime.today().strftime('%Y%m%d_%H%M%S_') + str(page_no) + ".png"
            self.shell.SendKeys(self.pic_name_find2)

        time.sleep(3)
        self.shell.SendKeys("{ENTER}")
        time.sleep(5)
        mspaint.kill()
        print(self.pic_name_find1)
        if page_no == 1: 
            pic = QPixmap(self.pic_name_find1)
            pic = pic.scaledToWidth(600)
            self.finding_match_label_1.setPixmap(QPixmap(pic))
        elif page_no == 2:
            pic = QPixmap(self.pic_name_find2)
            pic = pic.scaledToWidth(600)
            self.finding_match_label_2.setPixmap(QPixmap(pic))
        
        return

    # 내가 찾고자 하는 그림을 선택하는 버튼...을 눌렀을 때 기능
    def selectFindObjButtonClicked_1(self):
        filename = "{}.png".format(os.getpid())
        self.finding_name = QFileDialog.getOpenFileName(self, 'Open file', find_obj_path, "Images (*.png *.jpg)")
        if not self.finding_name[0]:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")
            return

        self.finding_le_1.setText(self.finding_name[0])
        self.obj_1 = cv2.imread(self.finding_name[0]) # 찾으려는 이미지
        cv2.imwrite(filename, self.obj_1)
        pic = QPixmap(filename)
        pic=pic.scaledToWidth(600)
        self.finding_obj_label_1.setPixmap(QPixmap(pic))        
        os.remove(filename)

    def selectFindObjButtonClicked_2(self):
        filename = "{}.png".format(os.getpid())
        self.finding_name = QFileDialog.getOpenFileName(self, 'Open file', find_obj_path, "Images (*.png *.jpg)")
        if not self.finding_name[0]:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")
            return

        self.finding_le_2.setText(self.finding_name[0])
        self.obj_2 = cv2.imread(self.finding_name[0]) # 찾으려는 이미지
        cv2.imwrite(filename, self.obj_2)
        pic = QPixmap(filename)
        pic=pic.scaledToWidth(600)
        self.finding_obj_label_2.setPixmap(QPixmap(pic))        
        os.remove(filename)

    # 찾아낸 그림의 문자를 분석합니다...이미지 투 문자 (OCR)
    # 요게 잘 안되요... 업데이트가 필요합니다.
    def findAnalyzeButtonClicked(self):
        #이미지 매칭 검색
        filename_1 = "{}.png".format(os.getpid())
        final_match_val_1 = 0
        match_val = 0
        top_left = 0
        try:
            final_image_1 = self.images[0]
        except:
            QMessageBox.about(self, "Warning", "도면을 선택되지 않았습니다.")
            return
        
        
        for n in range(0,len(self.dwg_img_files)):
            for i, method_name in enumerate(methods):
                method = eval(method_name)
                try:
                    res = cv2.matchTemplate(self.images[n], self.obj_1, method)
                except:
                    QMessageBox.about(self, "Warning", "찾고자하는 파일1을 선택하지 않았습니다.")
                    return

                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

                if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
                    top_left = min_loc
                    match_val = min_val
                else:
                    top_left = max_loc
                    match_val = max_val

            if final_match_val_1 < match_val:
                final_match_val_1 = match_val
                final_image_1 = self.images[n][top_left[1]:top_left[1]+self.obj_1.shape[0], top_left[0]:top_left[0]+self.obj_1.shape[1]]
        
        filename_2 = "{}.png".format(os.getpid())
        final_match_val_2 = 0
        match_val = 0
        top_left = 0
        try:
            final_image_2 = self.images[0]
        except:
            QMessageBox.about(self, "Warning", "도면을 선택되지 않았습니다.")
            return

        for n in range(0,len(self.dwg_img_files)):
            for i, method_name in enumerate(methods):
                method = eval(method_name)
                try:
                    res = cv2.matchTemplate(self.images[n], self.obj_2, method)
                except:
                    QMessageBox.about(self, "Warning", "찾고자하는 파일1을 선택하지 않았습니다.")
                    return
                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

                if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
                    top_left = min_loc
                    match_val = min_val
                else:
                    top_left = max_loc
                    match_val = max_val

            if final_match_val_2 < match_val:
                final_match_val_2 = match_val
                final_image_2 = self.images[n][top_left[1]:top_left[1]+self.obj_2.shape[0]+500, top_left[0]:top_left[0]+self.obj_2.shape[1]]

        text = pytesseract.image_to_string(final_image_1, config=custom_config)
        text += pytesseract.image_to_string(final_image_2, config=custom_config) 
        text = text.replace("\n\n","\n")
        text = text.replace(" \n","")
        self.terminal_browser.append(text)

        cv2.imwrite(filename_1, final_image_1)
        pic = QPixmap(filename_1)
        pic.save(f'{find_result_path}find_page_1.png','PNG')
        pic_display=pic.scaledToWidth(600)
        self.finding_match_label_1.setPixmap(pic_display)
        os.remove(filename_1)

        cv2.imwrite(filename_2, final_image_2)
        pic = QPixmap(filename_2)
        pic.save(f'{find_result_path}find_page_2.png','PNG')
        pic_display=pic.scaledToWidth(600)
        self.finding_match_label_2.setPixmap(pic_display)
        os.remove(filename_2)

        # fill line editor
        # 찾아낸 글자를 Line Editor에 적습니다. 현재는 아래 5개만 찾아서 넣습니다. (총 13개 칸...)
        self.info_le[0].setText(text[text.find("1 Pro",):text.find("\n",text.find("1 Pro",),)].replace("1 Project Name ","")) 
        self.info_le[6].setText(text[text.find("2 H/W",):text.find("\n",text.find("2 H/W",),)].replace("2 H/W, S/W Ver. ","")) 
        self.info_le[7].setText(text[text.find("3 OEM",):text.find("\n",text.find("3 OEM",),)].replace("3 OEM P/NO ",""))
        self.info_le[8].setText(text[text.find("4 MAN",):text.find("\n",text.find("4 MAN",),)].replace("4 MANDO ",""))
        self.info_le[9].setText(text[text.find("5 Sup",):text.find("\n",text.find("5 Sup",),)].replace("5 Supplier P/No ",""))

        file = open('info.txt','w')
        file.writelines(str(text.encode('utf-8-sig')))
        file.close()

        # 찾아낸 그림의 매치율 과 위치를 뿌려줍니다.
        self.terminal_browser.append(f'1st image match late:' + str(round(final_match_val_1*100,4)) + "%")     
        self.terminal_browser.append(f'2nd image match late:' + str(round(final_match_val_1*100,4)) + "%")     

    def OcrButtonClicked(self):
        text = pytesseract.image_to_string(Image.open(self.pic_name_find1)) 
        text += pytesseract.image_to_string(Image.open(self.pic_name_find2))
        text = text.replace("\n\n","\n")
        text = text.replace(" \n","")
        self.terminal_browser.append(text)
        return

    # 터미널 창을 깨끗하게...
    def clear_text(self):
        self.terminal_browser.clear()

    # 끌 때 잘 꺼지라고... 버튼 하나 놔봤어요. (근데 보통 X 누릅니다.)
    def exit_app(self):
        QCoreApplication.instance().quit()
        sys.exit(app.exec_())

    # PPT로 문서 만들 때 테스트용으로 만들어 봤어요...(지금은 안쓰네요... 엑셀로 관리)
    def ppt_add_picture(self):
        self.fname = QFileDialog.getOpenFileName(self, 'Open file', './find/')
        prs = Presentation()
        blank_slide_layout = prs.slide_layouts[6]
        slide = prs.slides.add_slide(blank_slide_layout)
        left = top = Inches(1)
        pic = slide.shapes.add_picture( self.fname[0],left, top)
        prs.save('text.pptx')

    # Table (DB)에 열을 추가 합니다. 추가할 때 Line Editor의 값들을 가져 옵니다.
    # Dataframe의 값을 먼저 업데이트하고... Table Widget에 값을 뿌려줍니다.
    # 그리고 CSV 파일도 업데이트 합니다.
    def add_row(self):
        new_pjt_info = [(le.text() for le in self.info_le)]
        dfNew = pd.DataFrame(new_pjt_info, columns = self.df.columns)
        self.df = self.df.append(dfNew, ignore_index=True)
        self.data_table_pjt.setRowCount(len(self.df.index))
        self.data_table_pjt.setColumnCount(len(self.df.columns))

        for i in range(len(self.df.index)):
            for j in range(len(self.df.columns)):
                self.data_table_pjt.setItem(i, j, QTableWidgetItem(str(self.df.iloc[i, j])))
        
        #self.df = pd.DataFrame([[1,1,1,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3]],columns=self.info_label)
        self.df.to_csv('test.csv',encoding='utf-8-sig')
        self.data_table_pjt.resizeRowsToContents()
        self.data_table_pjt.resizeColumnsToContents()

        self.terminal_browser.append("New pjt info. added")
        for le in self.info_le:
            le.clear()

        print(self.df)
    # Table (DB)에 열을 삭제 합니다. 추가할 때 Line Editor의 값들을 가져 옵니다.
    # Dataframe의 값을 먼저 업데이트하고... Table Widget에 값을 뿌려줍니다.
    # 그리고 CSV 파일도 업데이트 합니다.

    def delete_row(self):
        self.terminal_browser.append("Row["+str(self.data_table_pjt.currentRow()+1)+ "] Deleted")
        self.df = self.df.drop(self.data_table_pjt.currentRow())
        self.df = self.df.reset_index(drop=True)
        self.data_table_pjt.setRowCount(len(self.df.index))
        self.data_table_pjt.setColumnCount(len(self.df.columns))
        for i in range(len(self.df.index)):
            for j in range(len(self.df.columns)):
                self.data_table_pjt.setItem(i, j, QTableWidgetItem(str(self.df.iloc[i, j])))
        self.df.to_csv('test.csv',encoding='utf-8-sig')
        self.data_table_pjt.resizeRowsToContents()
        self.data_table_pjt.resizeColumnsToContents()
        print(self.df)

    # Table (DB)에 열을 선하면 내용을 Line Editor에 뿌려 줍니다.
    def item_clicked(self):
        self.data_table_pjt.selectRow(self.data_table_pjt.currentRow())
        for i, le in enumerate(self.info_le):
            le.setText(self.data_table_pjt.item(self.data_table_pjt.currentRow(),i).text())
        print(self.df)

    # Table Widget (DB) 의 선택된 행을 업데이트 합니다.
    # 업데이트 기준은 Line Editor 입니다.
    def update_row(self):
        new_pjt_info = [(le.text() for le in self.info_le)]
        print(len(self.df.columns))
        for i in range(len(self.df.columns)):
            self.df.iloc[self.data_table_pjt.currentRow(), i] = self.info_le[i].text()

        self.data_table_pjt.setRowCount(len(self.df.index))
        self.data_table_pjt.setColumnCount(len(self.df.columns))

        for i in range(len(self.df.index)):
            for j in range(len(self.df.columns)):
                self.data_table_pjt.setItem(i, j, QTableWidgetItem(str(self.df.iloc[i, j])))
        
        self.df.to_csv('test.csv',encoding='utf-8-sig')
        self.data_table_pjt.resizeRowsToContents()
        self.data_table_pjt.resizeColumnsToContents()

        self.terminal_browser.append("New pjt info. updated")
        for le in self.info_le:
            le.clear()

        print(self.df)

    # X 버튼을 눌렀을 때 ...
    def closeEvent(self, event):
        QCoreApplication.instance().quit()
        sys.exit(app.exec_())


    def set_file_name(self, full_file_name):

        ##@@ build file I/O function by regular expression

        filename, file_extension = os.path.splitext(full_file_name[0])
        RE_rule = re.compile('^.[a-z]+', re.I) ##@@ re.I (대소문자 무시)
        file_extension_ = RE_rule.search(file_extension)
        file_extension_ = file_extension_.group()

        date_now = datetime.today().strftime('%Y%m%d')
        write_file_name = filename + '_' +self.info_le[0].text() + '_rev' + self.info_le[2].text() +'_' + date_now + file_extension_
        
        self.write_file_name = write_file_name

    def open_file(self):

        QMessageBox.about(self, "Warning", '주의사항: 파일 생성 전, 생성할 차종 선택 필수')
        fname = QFileDialog.getOpenFileName(self, 'Open file', './template/',)

        return fname

    def insert_image(self, load_wb, sheet_name, anchor, target_width, image_type):
        
        working_sheet = load_wb[sheet_name]
        file_name = self.info_le[0].text() + '_rev' + self.info_le[2].text() + image_type
        file_path = os.path.join(find_result_man_path,file_name)
        print(file_path)
        

        if os.path.isfile(file_path):

            if working_sheet[anchor].value is not None:
                
                widthes = working_sheet[anchor].value
                screening_widthes = map(int, widthes.replace('[','').replace(']','').replace(' ','').split(','))

                for idx, image in enumerate(working_sheet._images):
                    #print('읽어드리는 값', image.width)

                    if image.width not in screening_widthes:

                        print('이미지 삭제, 삭제하는 값', image.width)
                        del working_sheet._images[idx]
                        break
                        
                    else:
                        pass

            existing_image_widthes = []
            
            for image in working_sheet._images:
                existing_image_widthes.append(image.width)

            working_sheet[anchor] = str(existing_image_widthes)

            img = openpyxl.drawing.image.Image(file_path)
            scaller = img.width/target_width
            img.height = img.height / scaller
            img.width = target_width
            img.anchor = anchor
            
            working_sheet.add_image(img)
            print('도면 추출 이미지 추가 완료')

            return load_wb
                
        else:
            QMessageBox.about(self, "Warning", '도면 추출 이미지 파일이 없습니다.')
            return load_wb
            

    # 검서 협정서 만들기 버튼을 눌렀을 때...
    def doc_agreement_build(self):

        fname = self.open_file()
        sheet_name = 'as'

        if bool(fname[0]):
            #self.terminal_browser.append(str(fname[0]))
            load_wb = load_workbook(fname[0], data_only=False) #### data_only=False for excel formulation
            load_ws = load_wb[sheet_name]
        
        else:
            QMessageBox.about(self, "Warning", '템플릿을 선택하세요')
            return

        ## 검사 협정서 부분 ##
        load_ws['B2'] = self.info_le[8].text() #MANDO P/N
        load_ws['B3'] = self.info_le[0].text() #Project name
        load_ws['B5'] = self.info_le[3].text() +'\n (' + self.info_le[4].text()+')' #EO No. & Rev.date
        load_ws['B6'] = self.info_le[12].text() # Working Date
        load_ws['B7'] = self.info_le[5].text() # Rev. History
        load_ws['B8'] = self.info_le[2].text() # Rev. ver.

        ## 검사 기준서 부분 ##\
        load_ws['G2'] = 'Project Name : ' + self.info_le[0].text()
        load_ws['G3'] = 'H/W, S/W Ver. : ' + self.info_le[6].text()
        load_ws['G4'] = 'MANDO P/N : ' + self.info_le[8].text()
        load_ws['G5'] = 'SUPPLIER P/N : ' + self.info_le[9].text()
        load_ws['G6'] = 'OEM P/N : ' + self.info_le[7].text()

        ##@@ 검사 협정서 only
        try:
            ## cover 시트 부분 ##
            load_cover = load_wb['COVER']
            load_cover['D15'] = load_cover['D18'].value
            load_cover['D18'] = load_ws['G3'].value + ' (Rev'+load_ws['B8'].value +')'

            ##@@ revision history 시트 부분 ##
            load_history = load_wb['S35_EK(Revision History)']
            
            ##@@ 5 ~ 25
            start_row = 5
            end_row = 25

            start_col = 2
            end_col = 4
            
            rows = [row for row in range(start_row, end_row+1) ]
            cols = [col for col in range(start_col, end_col+1) ]

            excape_loop = False

            for row_ in rows:

                if excape_loop:
                    break


                for col_ in cols:

                    print(load_history.cell(row = row_, column=col_).value)

                    if load_history.cell(row =row_, column=col_).value is None:
                        
                        
                        load_history.cell(row = row_, column=col_).value = self.info_le[2].text() # Rev. ver.
                        load_history.cell(row = row_, column=col_+1).value = self.info_le[3].text() + '(' + self.info_le[4].text()+')' #EO No. & Rev.date 
                        load_history.cell(row = row_, column=col_+2).value = self.info_le[5].text() # Rev. History

                        excape_loop = True

                        if load_history.cell(row =row_-1, column=end_col+1).value is None:      ##@@ end_col+1 : signiture
                            
                            load_history.cell(row = row_-1, column=end_col+1).value = 'SIGNED'
                            load_history.cell(row = row_-1, column=end_col+2).value = 'SIGNED'
                            load_history.cell(row = row_-1, column=end_col+3).value = 'SIGNED'
                            break

                        else:
                            break
                        

            '''
            B5 ##@@ Revision No.
            C5 ##@@ EO date
            D5 ##@@ Reasons for revision
            E5 ##@@ signiture (Prepared)
            F5 ##@@ signiture (Reviewed)
            G5 ##@@ signiture (Approved)
            '''            

            ##@@ Image insert 부분
            load_ws = load_wb['COVER']

            sheet_name = 'S36_EK(A)'
            anchor = 'L24'
            target_width = 270
            image_type = '_contents.jpg'
            load_wb = self.insert_image(load_wb, sheet_name, anchor, target_width, image_type)
        
        except:
             print('검사성적서 입니다.')
        
        self.set_file_name(fname)  ##@@ build file I/O function by regular expression
        load_wb.save(self.write_file_name)
        self.terminal_browser.append(self.write_file_name + " is saved")
        

    def doc_report_build(self):
        self.doc_agreement_build()


    def doc_sample_notice_build(self):

        fname = self.open_file()
        sheet_name = 'BOX식별표'
        
        if bool(fname[0]):
            #self.terminal_browser.append(str(fname[0]))
            load_wb = load_workbook(fname[0], data_only=False) #### data_only=False for excel formulation
            load_ws = load_wb[sheet_name]
        
        else:
            QMessageBox.about(self, "Warning", '템플릿을 선택하세요')
            return

        load_ws['B7'] = '★ '+self.info_le[0].text()+' ★'
        load_ws['I21'] = self.info_le[2].text()
        load_ws['B23'] = self.info_le[5].text()
        
        sheet_name = '초도품 적용 통보서'
        load_ws = load_wb[sheet_name]
        
        ## 초도품 적용 통보서 ##
        load_ws['H5'] = self.info_le[8].text() #MANDO P/N
        load_ws['H4'] = self.info_le[0].text() #Project name
        load_ws['L6'] = '■ 기타 : ' + self.info_le[5].text() # Rev. History
        
        #load_ws['B5'] = data[3] +'\n(' +data[4]+')' #EO No. & Rev.date
        #load_ws['B6'] = data[12] # Working Date
        
        load_ws['C11'] = load_ws['L11'].value
        load_ws['C12'] = load_ws['L12'].value
        load_ws['C13'] = load_ws['L13'].value
        load_ws['C14'] = load_ws['L14'].value
        load_ws['C15'] = load_ws['L15'].value
        
        load_ws['L11'] = "- 도면 Revision No. : "+ self.info_le[2].text()
        load_ws['L12'] = "- MANDO P/No : "+ self.info_le[8].text()
        load_ws['L13'] = "- H/W, S/W Ver "+ self.info_le[6].text()
        load_ws['L14'] = "- GP-12 식별 마크 : "+ self.info_le[11].text()
        load_ws['L15'] = "- Project name : "+ self.info_le[0].text()


        #sheet_name = '초도품 적용 통보서'
        anchor = 'P11'
        target_width = 260
        image_type = '_contents.jpg'
        load_wb = self.insert_image(load_wb, sheet_name, anchor, target_width, image_type)
        
        self.set_file_name(fname)  ##@@ build file I/O function by regular expression
        load_wb.save(self.write_file_name)

        #sheet_name = '초도품 적용 통보서'
        anchor = 'P18'
        target_width = 260
        image_type = '_revision.jpg'
        load_wb = self.insert_image(load_wb, sheet_name, anchor, target_width, image_type)

        self.set_file_name(fname)  ##@@ build file I/O function by regular expression
        load_wb.save(self.write_file_name)

        self.terminal_browser.append(self.write_file_name + " is saved")

    ##@@ Template 재생성 필요. (한글 Template)    
    def doc_PWS_build(self):
        
        fname = self.open_file()
        sheet_name = 'PSW'
        
        if bool(fname[0]):
            #self.terminal_browser.append(str(fname[0]))
            load_wb = load_workbook(fname[0], data_only=False, keep_vba=True) #### data_only=False for excel formulation
            load_ws = load_wb[sheet_name]
        
        else:
            QMessageBox.about(self, "Warning", '템플릿을 선택하세요')
            return

        load_ws['R4'] = self.info_le[8].text()  # MANDO P/N
        load_ws['R7'] = self.info_le[9].text()  # MHE   P/N
        load_ws['G10'] = self.info_le[2].text() # Rev. ver.
        load_ws['R10'] = self.info_le[3].text() # Rev. date.
        #load_ws['S10'] = self.info_le[3].text() # Rev. date.
        load_ws['O27'] = self.info_le[0].text() # Proj. name
        load_ws['H75'] = self.info_le[5].text() # Rev. History
        load_ws['V81'] = self.info_le[12].text() # Working Date
        #load_ws['Y81'] = self.info_le[12].text() # Working Date

        self.set_file_name(fname)  ##@@ build file I/O function by regular expression
        load_wb.save(self.write_file_name)
        self.terminal_browser.append(self.write_file_name + " is saved")

    def mail_document(self):
        
        self.mail_dialog = QDialog()
        self.mail_dialog.setWindowTitle('Dialog')
        self.mail_dialog.setWindowModality(Qt.ApplicationModal)
        self.mail_dialog.resize(400, 400)

        self.dialog_layout = QGridLayout()
        self.email_group = QGroupBox("Login Info")

        self.email_layout = QGridLayout()
        self.email_labels = ['ID','password','Receivers','CC','Subject','E-mail Body']
        self.email_loc_le = []

        ##@@ input 메세지에 대해서 set하는 handler 설정 필요 (enter 없이)
        ##@@ 수정 필요 self.idx => idx
        for self.idx, label_ in enumerate(self.email_labels):

            self.email_layout.addWidget(QLabel(self.email_labels[self.idx],self),(self.idx),0,1,1)
            self.email_loc_le.append(QLineEdit(self))
            self.email_loc_le[self.idx].setFixedHeight(20)
            self.email_loc_le[self.idx].textChanged.connect(self.onChanged)
            self.email_layout.addWidget(self.email_loc_le[self.idx],(self.idx),1,1,2)
        
        self.email_loc_le[0].setPlaceholderText('hclee')
        self.email_loc_le[1].setPlaceholderText('**********')
        self.email_loc_le[1].setEchoMode(QLineEdit.Password)
        #self.email_loc_le[2].set()

        
        self.login_button_select = QPushButton('Log in')
        self.login_button_select.clicked.connect(self.login)
        self.email_layout.addWidget(self.login_button_select, 7, 0, 1, 3)
        self.email_group.setLayout(self.email_layout)
        self.dialog_layout.addWidget(self.email_group,0,0,1,1)
        self.mail_dialog.setLayout(self.dialog_layout)

        self.mail_dialog.show()

        return
    
    def onChanged(self):
        
        self.email_loc_le[self.idx].setText(self.email_loc_le[self.idx].text())
    
    def login(self):
        '''
        driver = webdriver.Chrome(executable_path=r'D:/chrome_driver/chromedriver.exe')
        
        driver.get(r'https://accounts.google.com/signup')

        p = driver.current_window_handle

        driver.find_element_by_link_text("도움말").click()
        #prints parent window title
        print("Parent window title: " + driver.title)
        #get current window handle
        #get first child window
        chwnd = driver.window_handles
        for w in chwnd:
        #switch focus to child window
            print(w)
            #if(w!=p):
            #    driver.switch_to.window(w)
            #break
            
        driver.switch_to.window(chwnd[1])
        time.sleep(5)
        print("Child window title: " + driver.title)


        #driver.find_element_by_link_text("고객센터 관련 의견 보내기").click()

        xxpath1 = "//a[@class='user-feedback-link']"
        driver.find_element_by_xpath(xxpath1).click()


        '''
        driver = webdriver.Chrome("D:/chrome_driver/chromedriver.exe")

        url = "http://gw.mandohella.com"
        driver.get(url)
        driver.implicitly_wait(5) #최대 5초 기다림

        
        xpath1 = "//input[@id='lvLogin_LoginID']"  # login - ID
        driver.find_element_by_xpath(xpath1).send_keys(self.email_loc_le[0].text())
        
        xpath2 = "//input[@id='lvLogin_Password']" # login - PW
        driver.find_element_by_xpath(xpath2).send_keys(self.email_loc_le[1].text())
        
        xpath3 = "//a[@class='btn btn-info']"      # login - btn click
        driver.find_element_by_xpath(xpath3).click()
    
        xpath4 = "//li[@class='gnb-menu  dropdown ']" # email - menu click
        driver.find_element_by_xpath(xpath4).click()
        
        #p = driver.window_handles
        
        xpath5 = "//a[@class='btn btn-primary btn-round btn-width right-5']" # email - tab에서 "메일쓰기" - btn click
        driver.find_element_by_xpath(xpath5).click()

        driver.implicitly_wait(5)
        
        ## window switch ##
        
        chwnd = driver.window_handles     # 전체 창에 대한 요소를 배열로 저장
        driver.switch_to.window(chwnd[-1]) # 최종 창 선택
        time.sleep(5)
        
        
        ## 메일 수신인 ##
        xpath6 = "//input[@id='toInput']"
        driver.find_element_by_xpath(xpath6).send_keys(self.email_loc_le[2].text())
        
        ## 메일 수신인:참조 ##
        xpath7 = "//input[@id='ccInput']"
        driver.find_element_by_xpath(xpath7).send_keys(self.email_loc_le[3].text())
        
        ## 메일 제목 ##
        xpath8 = "//input[@id='tbSubject']"
        driver.find_element_by_xpath(xpath8).send_keys(self.email_loc_le[4].text())
        
        ##@@ 메일 내용 작성에 대한 html 변환 code 추가 필요
        ## 메일 내용 ##
        xpath9 = "//body[@id='dext_body']"
        driver.find_element_by_xpath(xpath9).send_keys(self.email_loc_le[5].text())
        
        ## 메일 보내기 ##
        #xpath10 = "//a[@id='btSendMail']
        #driver.find_element_by_xpath(xpath10).click()
        
        return


if __name__ == "__main__":
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    window = MyWindow()
    window.show()
    app.exec_()
    sys.exit(app.exec_())